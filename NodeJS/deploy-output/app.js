
/*
+--------------------------------------------------------------------+
|               ____        __             __                        |
|              / __ \____ _/ /_____ ______/ /___ ___  __             |
|             / / / / __ `/ __/ __ `/ ___/ / __ `/ / / /             |
|            / /_/ / /_/ / /_/ /_/ / /__/ / /_/ / /_/ /              |
|           /_____/\__,_/\__/\__,_/\___/_/\__,_/\__, /               |
|           Automating Digital Production      /____/                |
|                                                                    |
|                                                                    |
|   We believe that leveraging data in the design process should     |
|   be a playful and rewarding art. Our products make this           |
|   possible for digital content creators.                           |
|                                                                    |
|   |email                      |web                  |twitter       |
|   |support@dataclay.com       |dataclay.com         |@dataclay     |
|                                                                    |
|   This code is provided to you for your personal or commercial     |
|   use.  However, you must abide by the terms of the MIT            |
|   License: https://opensource.org/licenses/MIT                     |
|                                                                    |
|                                                                    |
|                Copyright 2013-2018 Dataclay, LLC                   |
|                  Licensed under the MIT License                    |
|                                                                    |
+--------------------------------------------------------------------+

|||||||| Description

This application references a data source and uploads output assets
generated by Templater to a cloud-based storage service, then stages
that uploaded asset to a streaming provider and populates the original
data source with a URL to share or embed.

Please be sure to review the README.md file in this folder to
understand how to use this script.

*/

var enums             = require('./constants'),
    async             = require('async'),
    fs                = require('fs'),
    pth               = require('path'),
    nuuid             = require('node-uuid'),
    nopen             = require('open'),
    nurl              = require('url'),
    nutil             = require('util'),
    Q                 = require('q'),
    moment            = require('moment'),
    emoji             = require('node-emoji'),
    config            = require('./config'),
    jw                = require('./jwplatform')
    gsheet            = require('./gsheet'),
    aws               = require('./aws');
    argv              = require('minimist')(process.argv.slice(2));

async.series([

  function(step){

    var conf =  {
                    gcreds          : argv.gcreds_file
                  , jwcreds         : argv.jwcreds_file
                  , awscreds        : argv.awscreds_file
                  , data_type       : enums.data.types.GOOGLE
                  , user            : argv.author
                  , data_collection : argv.worksheet
                  , data_key        : argv.sheet_key
                  , data_uri        : argv.data_uri
                  , data_index      : argv.idx
                  , start_row       : argv.start_row
                  , end_row         : argv.end_row
                  , asset_loc       : argv.asset_loc
                  , poster_frame    : argv.poster_frame
                  , asset_ext       : argv.asset_ext
                  , preview_info    : { domain : argv.domain_cell, route : argv.route_cell, player_key : argv.player_cell }
                  , storage_type    : "S3"
                  , storage_region  : argv.s3_region
                  , storage_bucket  : argv.s3_bucket
                  , storage_folder  : argv.s3_folder
                  , broadcast       : argv.broadcast
                  , title           : argv.title
                  , desc            : argv.desc
                };

    config.get(conf); 
    config.display();
    step();

  },

  jw.get,
  gsheet.get,
  
  function process_video(step) {
    
      var p = config.params;
      
      // google provides some query options 
      gsheet.worksheet.getRows({

        offset  : (p.batch.start-1),
        limit   : ((p.batch.end) - (p.batch.start))+1,
        orderby : p.fields.index

      }, function( err, rows ){

          if (err) {
            throw err;
          }

          console.log("Processing video rendered from data in row " + rows);
          aws.upload_batch(rows, step);

      });
  }

], function(err) {
  console.log("exiting");
  process.exit(0);
}); //END MAIN ALGORITHM
