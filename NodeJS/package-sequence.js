/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Archive an image sequence generated by Adobe After Effects via Templater
Copyright (c) Dataclay LLC 2016
MIT License

You must enter `npm install` to install all dependency modules used in
this script.  All modules are listed in the package.json file in the
root of this repository.

Enter the following command within the "After all jobs" field found
within the Templater Preferences dialog.  If using the Templater CLI,
enter the following command in the "post_cmd_job" property found
within the templater-options.json file.

     node /path/to/event-scripts/NodeJS/package-sequence.js --outdir $out_dir --outname $id --aefile $aep --aedir $aep_dir --repo "/path/to/archive/repository" --extension "zip"

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

//Required NodeJS Modules
var os       = require('os'),
    fs       = require('fs'),
    fse      = require('fs-extra'),
    util     = require('util'),
    path     = require('path'),
    moment   = require('moment'),
    archiver = require('archiver');
    argv     = require('minimist')(process.argv.slice(2));

//Optional for testing:
//Change these paths and strings if you want to test this script on the command line outside of AE
var test_dest       = "/path/to/output/folder",
    test_proj       = "/path/to/project/folder",
    test_outname    = "sequence_id"; //Use a name / id of a given job.
    test_repo       = "/path/to/archive/repository";
    test_ext        = "zip"; //Use any extension you would like.

var msg = '';
msg +=  "\r\n\r\n";
msg +=  "\r\n\r\n+-------------------------------------------------------------------+\r\n";
msg +=  "|                     Packaging Image Sequence                      |\\\r\n",
msg +=  "+-------------------------------------------------------------------+\\\r\n",
msg +=  "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\n\r\n"

var logfile         = "archival.log",
    proj            = path.resolve(argv.aedir || test_proj),
    log             = path.resolve(os.tmpdir(), logfile),
    log_dest, out_root, out_dir;

//Location to write the archived sequence
if (argv.outdir && argv.outname) {
    log_dest  = path.resolve(argv.repo, logfile);
    out_root  = path.resolve(argv.outdir);
    out_dir   = path.resolve(argv.outdir, argv.outname);
    out_name  = argv.outname;
    repo_dir  = path.resolve(argv.repo);
    arch_ext  = argv.extension;
} else {
    log_dest  = path.resolve(test_repo, logfile);
    out_root  = path.resolve(test_dest);
    out_dir   = path.resolve(test_dest, test_outname);
    out_name  = test_outname;
    repo_dir  = path.resolve(test_repo);
    arch_ext  = test_ext;
}

//Design the output for the post job log
msg += "\r\nArchived on            =>  " + moment().format('MMMM Do YYYY, h:mm:ss a');
msg += "\r\n\r\nAE Project File        =>  " + argv.aefile;
msg += "\r\n\r\nAE Project Directory   =>  " + proj;
msg += "\r\n\r\nTemplater Output Root  =>  " + out_root;
msg += "\r\n\r\nAE Output Name         =>  " + out_name;
msg += "\r\n\r\nSequence Directory     =>  " + out_dir;
msg += "\r\n\r\nArchive Extension      =>  " + arch_ext;

console.log(msg);

//Use archiver to zip up the entire out_dir
var archive_filename = out_name + "." + arch_ext,
    archive_file     = path.resolve(out_root, archive_filename),
    archive_output   = fs.createWriteStream(archive_file),
    archive          = archiver("zip");

archive_output.on('close', function() {

    msg += "\r\n\r\nArchive Size           =>  " + archive.pointer();
    msg += "\r\n\r\nArchive Location       =>  " + path.resolve(repo_dir, archive_filename);
    msg += "\r\n\r\nArchiver finalized.  The output file descriptor has closed."

    //Append to log and copy log to project directory.
    //NOTE:  On Windows, NodeJS cannot append files that
    //       exist on a mapped network drive.  First we
    //       append a local file in the temp directory, then
    //       copy it to the project directory
    try {
        fs.appendFileSync(log, msg, 'utf8');
        fse.copySync(log, log_dest);
    } catch (err) {
        console.error(err.message);
        fs.appendFileSync("\r\nError : " + err.message);
    }

    //Copy the archive to its repository
    fse.copySync(archive_file, path.resolve(repo_dir, archive_filename));

});

archive_output.on('error', function(err) {
  throw err;
});

archive.pipe(archive_output);

archive.directory(out_dir, "/").finalize();
